// src-electron/electron-main.ts
import { app, ipcMain, BrowserWindow, dialog, shell } from "electron";
import path from "path";
import os from "os";
import { fileURLToPath } from "url";
import axios from "axios";
import fs from "node:fs/promises";
import { createWriteStream } from "node:fs";
var platform = process.platform || os.platform();
var currentDir = fileURLToPath(new URL(".", import.meta.url));
var mainWindow;
async function createWindow() {
  mainWindow = new BrowserWindow({
    icon: path.resolve(currentDir, "icons/icon.png"),
    // tray icon
    width: 1024,
    height: 768,
    useContentSize: true,
    webPreferences: {
      nodeIntegration: true,
      webSecurity: false,
      contextIsolation: true,
      sandbox: false,
      // More info: https://v2.quasar.dev/quasar-cli-vite/developing-electron-apps/electron-preload-script
      preload: path.resolve(
        currentDir,
        path.join("/Users/marcel/Desktop/Samantha/.quasar/dev-electron/preload", "electron-preload.cjs")
      )
    }
  });
  if (true) {
    await mainWindow.loadURL("http://localhost:9300");
  } else {
    await mainWindow.loadFile("index.html");
  }
  if (true) {
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.webContents.on("devtools-opened", () => {
      mainWindow?.webContents.closeDevTools();
    });
  }
  mainWindow.on("closed", () => {
    mainWindow = void 0;
  });
}
void app.whenReady().then(createWindow);
ipcMain.handle("pick-folder", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory", "createDirectory"]
  });
  if (result.canceled)
    return null;
  return result.filePaths[0];
});
ipcMain.on("setup-progress", (event, message) => {
  if (mainWindow)
    mainWindow.webContents.send("setup-progress", message);
});
ipcMain.on("open-folder", (event, folderPath) => {
  shell.openPath(folderPath);
});
ipcMain.handle("download-models", async (_event, dest, url) => {
  const response = await axios.get(url, { responseType: "stream" });
  await new Promise((resolve, reject) => {
    const stream = createWriteStream(dest);
    response.data.pipe(stream);
    stream.on("finish", resolve);
    stream.on("error", reject);
  });
  await fs.chmod(dest, 493);
  return { success: true };
});
ipcMain.handle("read-workspace", async (_event, folderPath) => {
  const projectsPath = path.join(folderPath, "projects");
  const dir = await fs.opendir(projectsPath);
  const dirs = [];
  for await (const dirent of dir)
    if (dirent.isDirectory())
      dirs.push(dirent.name);
  return dirs;
});
ipcMain.handle("file-exists", async (_event, filePath) => {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
});
ipcMain.handle("pick-file", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [
      { name: "Videos", extensions: ["mp4", "avi", "mov", "mkv", "webm", "wmv", "flv", "mpeg", "mpg"] }
    ]
  });
  if (result.canceled)
    return null;
  return result.filePaths[0];
});
app.on("window-all-closed", () => {
  if (platform !== "darwin") {
    app.quit();
  }
});
app.on("activate", () => {
  if (mainWindow === void 0) {
    void createWindow();
  }
});
//# sourceMappingURL=data:application/json;base64,
